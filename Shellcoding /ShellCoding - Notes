

Module 2 : Introduction to Shellcoding

# 1. Shellcoding Basics 

	Ques : What is shellcode?
	Ans  : Machine Code with a specific purpose 
		- spawn a local shell 
		- bind to port and spawn shell
		- create a new shell 
	       can be executed by the CPU directly - no further assembling / linking or seperate 
	       compiling required. 
	
	Ques : How is shellcode delivered ? 
	ans  : Part of an Exploit 
		- size of shellcode important (smaller size = better)
		- Bad character a concern 
			- 0x00 most common
	       Added into executables 
		- run as seperated thread 
		- replace executable functionality
		- size of shellcode not a concern
	# Shellcode resources 
		- http://www.shell-storm.org/
		- http://exploit-db.com/
		- http://www.projectshellcode.com/

	 
        # Exit Shellcode 
		global _start
		section .text
		_start: 
			mov eax, 0x1
			mov ebx, 0x10
			int 0x80 
	
		- Use EAX and EBX register with the syscall number and exti code loads to 0x00 in shellcode
		- change instruction to avoid 0x00 
		- change instruction to make shellcode more compact 
			
	# Objdump to Shellcode
		- command line FU 
		 		 	 
	# Helloworld Shellcode Using JMP-CALL-POP 
	  Modifying the Hello world 
		- Replace all 0x00 opcode instruction 
		- No hardcoded Address 
			- dynamically figure out address of Hello World string 
	  we use JMP-CALL-POP Method 
	
	# JMP-CALL-POP 
	  JMP short Call_shellcode:
	  shellcode:
		pop ecx
		...
		...
		... 
	  
	  Call_shellcode:
		
		call shellcode:
		HelloWorld  db "Hello World!"
	Technique : whenever we call a label the next instruction after that call label instruction the address of that 
		    next instruction is going to be push onto stack i.e the return address which is used  once we are 
		    inside the procedure called by call we hit a ret and we would like to go back to execute a next 
		    instruction after call 
		    so the JMP-CALL-POP technique exploits this 
	How ????  : first it does a short jump the best part about short jump is they use offsets which lie between -128 to
		    127 so their is no hardcoded values. 
		    
		    JMP short Call_shellcode jumps to the call_shellcode label which ends up executing call shellcode
		    now at this instance we end up pushing the next instruction address to the stack . the next instruction
		    is the address of the hello world string in the program. 
		
		    Now as soon as the call shellcode execute we jump control to shellcode: label now the pop ecx pop out the 
		    deword from the stack which is the address of the string "HelloWorld ". 
	
		    This is the complete procedure of JMP-CALL-POP
 	   	  	 	 
	Problem : we are trying to reference message with its address but this is not desirable we need to find the address 
		  dynamically at the run time and we need not to worry about the change in address  

	# Execve Shellcode JMP-CALL-POP Method
	  Execute a new Program 
	  - We need to find a syscall which can allow us execute a program within our shellcode 
	  - "/bin/bash" to get a shell 
	  - common technique to get a command prompt from an expolited process 
	 - So we use the execve syscall for that purpose 

	 command to get manual : man execve 

	 execve takes three arguments : 
		1 : the program pointed to by file name [path of the file ex. /bin/bash]  
		2 : argv[] : argv is a array of argument string passed to the new program 
		3 : envp[] : array of strings to set some additional arguments     
 	 - file name should be placed in EBX register : /bin/bash, 0x00
 	 - second agrument conatin address of /bin/bash placed in ECX : addressof /bin/bash, 0x00000000
	 - envp just contain the address which points to null placed in EDX register : 0x00000000
	NOte: there are so many null character but we cannot store it into shellcode now to solve this 
	
       # Approach to eliminate null character 
        - first initialize the string as /bin/bashABBBBCCCC
 	- we have to use ESI because all four (EAX, EBX, ECX, EDX) are in use
	
	1. Use JMP-CALL-POP to find the address of the string 
	2. Now we have to convert A to 0x0
	3. conert "BBBB" to address of "/bin/bash"
	4. convert "CCCC" to all the nulls : 0x00000000
	
       # Is there a need for exit()
        - execve does not return if successful
        - There is no need for exit() to be called 

       # Execve Shellcode Stack Method 
        The key Difference is that rather than pushing them in specific order we are gone to push them in different order 
	and then point the appropriate registers in such a way so that this condition in the previous setup is valid.

	- First we push the dword conatining all the nulls character i.e 0x00000000
 	- Next thing we will push is the string /bin/bash on the stack
	- Whenever you run a program by giving its path the number of slashes using their doesn't realy matter 
	- now make it length of the string in multiple of 4 by adding extra slashes  
	- reverse a string and change it into hex and push on to the stack 

       # XOR Encoder and Decoder 
        - 0	0	0
	- 1	1	0
	- 0	1	1
	- 1	0	1
 	= (A XOR B) XOR B = A
	- select an encode byte eg. 0xAA
	- XOR every Byte of shellcode with 0xAA
	- write a decoder stub which will XOR the encoded shellcode byte with 0xAA and recover original shellcode
	- stub then passes the control to decoded shellcode 
	
	Procedure : 
	first we do byte by byte xoring with 0xAA with our shellcode we get the output which is the encoded output 
	Now in program we write a XOR Decoder Stub in most common case prepend it to the encoded shellcode
	and what this decoder stub does it works on the shellcode and decode it in memory to give us back the 
	original shellcode now after this is done the decoder stub passes control to the original shellcode.
	then our original shellcode will run.
	original shellcode is the shellcode after compiling shellcode.c
	
      # Using Metasploit's Encoder 
      	- create a shellcode then use msfvenom to encode it.
	- check the generated shellcode by encoding with shellcode.c file 
      
      # AV and IDS Evasion 
        - Almost all encoders in metasploit are well known and documented
	- Might not be useful to create evasion 
		- shikata_ga_nai workes at time 
	- Need for custom encoder 
      # Custom Encoder 
        - Easy to write a custom encoder and bypass AV etc. till the time the technique is not disclose 
	- Very difficult to wirte an encoder which has a public technique and evade AV 
	- Encoder Stub is the one which is generally fingerprinted 

      # Simple NOT ENcoder 
        - Transform every byte in your shellcode using NOT 
	- Decoder will NOT the encoded byte to get the original shellcode back 
	- pass control to shellcode after all byte is decoded
       
 
      # Some Usefull Commands : 
      	- objdump -d [executable_name] -M intel
	- objdump -d ./not_decoder|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'
	- gcc -fno-stack-protector -z execstack -m32 testingshell.c -o testingshell
	
      # Insertion Encoder : 
       	- Let we have a shellcode in the case of the insertion encoder we insert the garbage byte between every two byte of
	  the original shellcode  
	- so this confuse the lot of IDS system 
	- To decode we need a decoder as insertion decoder stub 
	- In decoder we overwrite the garbage 
	- Then the insertion decoder stub send control to original shellcode 

      # XOR Decoder using MMX 
        - what are the advantages ? 
		- Existing "popular" shellcodes hardly use them 
		- Probably detection rates lesser by AV and other analysis tool 
		- Easy to replicate existing functionality using these extensions 
      
      # MMX Based XOR Decoder 
        - SIMD - Single Instruction multiple data 
	- Registers MM0 to MM7
	- Can load 8 Bytes qword - 64 bits
	- Moving Data movq
	- XOR'ing DATA - pxor
	- The Key Difference from previous XOR decoder 
		- Operates over 8 Bytes at the same time 
      
      # Using the FPU for GetPC
        - The main instruction which is used the most is the FSTENV GetPC 
	- A way to retrieve the value of the EIP on x86 system is to use the x87 FSTENV instruction to store the state of the
	  x87 floating point chip after issue a FLDZ instruction. The structure store in memory by FSTENV will then contain 
	  the address of the FLDZ instruction at offset 0x0C of the structure.
      
      # Polymorphism  
        - Need of Polymorphism 
		- AV and IDS can use the shellcode as a pattern to search 
		- Easy to fingerprint 
		- Detection Simple 
	- Encoding and Encryption 
		- Original Shellcode Protected 
		- Decoder/Decrypter stub however small, is prone to fingerprint 
		- Back to square 1
	-  Imagine if 
		- We could make our shellcode look different every time we create it 
		- Functionality remain same
		- semantically equivalent instruction 
		Detection is now much much difficult 
 		Enter POLYMORPHISM.
	- Basic Principle of create polymorphic shellcode 
		- Replace instructions with equivalent functionality ones
		- add garbage instruction which don't change functionality in any way "NOP Equivalent"
		- NOP is the instruction which basically does nothing 
	- Some Polymorphic Engines 
		- ADMutate
		- CLET
		- VX Heavens Mirror
	       	
       # Analyzing the 3rd party shellcode 
        - Use GDB 
	- USe Ndisasm
	- Libemu - Shellcode Emulation 
	
       # Staged Shellcode 
       	- Divided into 2 stages 
		- First stage is small and loads the second stage 
			- from input
			- from a file / Over a network 
		- first stage passes control to the second stage 
	- useful when very less sapce to run shellcode in an exploit 
    	- Ndisasm give you a quick disaable of shellcode 
	- root@kali~ echo -ne "shellcode" | ndisasm -u -
	- example:  echo -ne "\x31\xc0\x50\xbe\x1e\x1e\x62\x57\x81\xc6\x11\x11\x11\x11\x89\x74\x24\xfc\xc7\x44\x24\xf8\x2f\x62\x69\x6e\x83\xec\x08\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" | ndisasm -u -

       # Network based second stage loading 
       	- Bind TCP (satged)
	- Reverse TCP (staged)
	- Meterpreter is staged 

       # Analyzing Shell_Bind_TCP and Shell_Reverse_TCP with libemu
       	- Shell_XXX_TCP
		- Binding a Shell is the most common way to get command line access to a compromised system
		- Bind Shell ( Listening on victim's port )
		- Reverse Shell ( connect back to Attacker's port )
      
       # Crypters
       	- crypter are program which encrypt executables or shellcode and decrypt at run time and then run the decrypted program or shellcode
	- for powerfull crypto technique like RC4, AES etc a lot of assembly code 
	- shellcode size too large to be useful 
       # RC4
        - Symmetric stream cypher 
	- 2 Step Process 
		- Key scheduling Algorithm 
		- Pseudo Random Number Generation 
       # Writing an RC4 Shellcode Crypter in C
       	- Encryption Phase :
		- for a given key, encrypts shellcode 
	- Decryption Phase :	
		- For the same key, Decrypt shellcode
		- Executes it 
 
       # Chaining Method 
       	- Create Shellcode 
	- Encoded with XOR 
	- Encrpt with Crypter (needs to be the last )
	 	    
