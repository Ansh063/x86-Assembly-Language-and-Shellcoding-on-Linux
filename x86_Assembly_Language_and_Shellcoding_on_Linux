
 # Assembly Language is the gateway to understanding exploitation techniques, reverse Engineering, shellcoding and 
   other low level fields in information security.
 
 1. What is Assembly Language ? 
   
	- Low level programming language 
	- Communicate with microprocessor 
	- Specific to the Processor family 
	- An almost one to one correspondence with machine code 
	
 	     
  Assembly Language  -------- Assembler + Linker ---------> Machine Language
  
  ------------------------------------------------------------------------------------------------------------------
  
  # Different Processors - Different Assembly Language 
  
  - Intel
  - ARM
  - MIPS
  
  ------------------------------------------------------------------------------------------------------------------
  
  # Intel Achitecture 
  
  -> IA - 32
  -> IA - 64
  
  ------------------------------------------------------------------------------------------------------------------
  
  # Why Intel Architecture - 32 Bit ?
  
  - Large number of machines out there still running IA-32
  - Logical Progression to IA - 64
  - Shellcoding, Encoder, Decoder, Packers etc Implementation Difference. 
  ------------------------------------------------------------------------------------------------------------------
  # Installation of NASM shell : 
  
  - nasm : apt-get install nasm build-essential
   
  # Exercise 1.2 : Understanding your CPU
  
  - Find CPU detail on the Ubuntu System
  	- lscpu 
  	- cat /proc/cpuinfo
  - How do you know that if you are on a 32/64 bit CPU ? 
  - How do you know your CPUs additional capabilities Such as FPU, MMX, SSE, SSE2 etc
  
  ------------------------------------------------------------------------------------------------------------------
     
  # Intel Achitecture - 32 
  
  System Organization Basics 
  
  1. CPU 
  
   	Control Unit  <------>  Execution Unit  <-------> Registers
   						<-------> Flags 
   
   Control Unit   : Retrieve / Decode Instruction, Retrive / Store data in memory 
   Execution Unit : Actual Execution of Instructions happens here 
   Registers      : Internal Memory location used as "Variable"
   Flags  	  : Used to indicate various "events" when execution is happening.
   
   2. IA-32 Registers 
   
   - General Purpose Registers
   - Segment Register
   - Flags, EIP
   - Floating Point Unit Register
   - MMX Register
   - XMM Register
    					
   # General Purpose Register 
   							  7
          ----------------------------------------------------------------
   EAX    |				|	AH	  |	AL	 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== AX =========== 0	  
     
     							  7
          ----------------------------------------------------------------
   EBX    |				|	BH	  |	BL	 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== BX =========== 0	  

   							  7
          ----------------------------------------------------------------
   ECX    |				|	CH	  |	CL	 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== CX =========== 0	  

   							  7
          ----------------------------------------------------------------
   EDX    |				|	DH	  |	DL	 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== AX =========== 0	  



   							  7
          ----------------------------------------------------------------
   ESP    |				|		  |		 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== SP =========== 0	  

   							  7
          ----------------------------------------------------------------
   EBP    |				|		  |		 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== BP =========== 0	  

   							  7
          ----------------------------------------------------------------
   ESI    |				|		  |		 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== SI =========== 0	  

   							  7
          ----------------------------------------------------------------
   EDI    |				|		  |		 |	
     	  ----------------------------------------------------------------
  	  31  				15 ============== DI =========== 0	  
     
     
  # GPR Common Functionality 
  
  - EAX : Accumulator Register - Used for storing operands and result data 
  - EBX : Base Register - Pointer to Data 
  - ECX : Counter Register - Loop Operation 
  - EDX : Data Register - I/O Pointer
  - ESI EDI : Data Pointer Register for memory operation 
  - ESP : Stack Pointer Register 
  - EBP : Stack Data pointer Register
  
      
  # Segment Register 
  
  		------------------------------
  	CS	|	   Code 	     |     Code Segment 
  	 	------------------------------
  	DS	|	   Data 	     |	   Data segment  	
  		------------------------------
  	SS	|	   Stack	     |     stack segmeny
  		------------------------------
  	ES	|	   Data  	     |
  		------------------------------
  	FS	|	   Data		     |
  		------------------------------
  	GS   	|	   Data		     |	
     		------------------------------
     		15			     0	
     		
	Ussage Depend on memory model - Flag or segmented ?      
     
  # EFLAGS Registers
  
  - X ID Flags (ID)
  - X Virtual Interrupt Pending (VIP)
  - X Virtual Interrupt Flag (VIF)
  - X Alignment Check (AC)
  - X Virtual -8086 Mode (VM)
  - X Resume Flag (RF)
  - X Nested Task (NT)
  - X I/O Privilege Level (IOPL)
  - S Overflow Flag (OF)
  - C Directional Flag (DF)
  - X Interrupt enable Flag (IF)
  - X Trap Flag (TF)
  - S Sign Flag (SF)
  - S Zero Flag (ZF) 
  - S Auxiliary Carry Flag (AF)
  - S Parity Flag (PF)
  - S Carry Flag (CF)
     
  S : Indicates a Status Flag
  X : Indicates a system Flag  
  C : Indicates a Control Flag 
  
  
  # EIP 
  	- Instruction Pointer 
  	- Holy grail for shellcoding, Exploit research etc.
  	- it contain the instruction pointer i.e next instruction to be executed . It is 32 bit wide 
  	    
  # Floating Point Unit or x87 
  	- FPU has different Data registers for manipulating Floating point numbers.
  	- Size : 80 bits 
  	
  # SIMD
  	- Simgle Instruction Multiple Data 
  	- Extension 
  		- MMX
  		- SSE
  		- SSE2
  		- SSE3
  	- Uses MMX and XMM Registers 
  	
  # MMX 
  
  		-------------------------
  	ST(0)	|	|	MM0	|		 
  		-------------------------
  	ST(1)	|	|	MM1	|		 
  		-------------------------
  	ST(2)	|	|	MM2	|		 
  		-------------------------
  	ST(3)	|	|	MM3	|		 
  		-------------------------
  	ST(4)	|	|	MM4	|		 
  		-------------------------
  	ST(5)	|	|	MM5	|		 
  		-------------------------
  	ST(6)	|	|	MM6	|		 
  		-------------------------
  	ST(7)	|	|	MM7	|		 
  		-------------------------
  		79	63		0
  		
  # XMM 128 bit
  
  		-------------------------
  		|	  XMM0		|
  		-------------------------
  		|	  XMM1		|
  		-------------------------
  		|	  XMM2		|
  		-------------------------
  		| 	  XMM3		|
  		-------------------------
  		|	  XMM4		|
  		-------------------------
  		|	  XMM5		|
  		-------------------------
  		| 	  XMM6		|
  		-------------------------
  		|	  XMM7		|
  		-------------------------
  		127			0
  		
  # Inspect the general purpose, segment , EFLAGS, FPU, XMM, MMX registers
  	- gdb /bin/bash
  	- break main 
  	- run
  	- info registers : show all the registers 
  	- To display any particular register : display /x $eax 
  					     : display /x $ax 
  					     : display /x $ecx
  					     : display /x $cx
  	- disassemble $eip : in order to look next instruction 
  
  NOTE : By default gdb does not show FPU ,MMX, XMM registers      
	- To show all the registers : info all-registers
	
	There are two type of syntax in gdb 1. ATNT 2. INTEL by default is ATNT to change
		- set disassembly-flavour intel
 	 
  # CPU Modes and Memory Management 
  
    CPU Modes For IA 32
    
    	- Real Mode 
    		- At power up or reset 
    		- Can only access 1MB Memory 
    		- No memory protection 
    		- Privilege Levels (Kernel vs User Space) not Possible 
    		
    	- Protected Mode 
    		- upto 4GB Memory 
    		- memory protection / privilege level / multi tasking 
    		- supports Virtual-8086 mode 
    		
    	- System Management mode 
    		- Used for power management task 
    		
    Memory Models : 
    	- Flat Model 
    		- In this the address is linear across linear Address space  
    	- Segmented Model 
    		- In this we use a segment selector and offset in that segment to access location
    	- Real-Address Mode Model 
    		- Special case of segmented model 
    		
    	
   Note : IA-32 Linux basically uses  protected mode  and flat memory model for functioning 
   
   # 32-Bit linux uses 
   	- Protected Mode 
   	- Flat Memory Model 
   	- 4GB Address Space = 2^32
   	- Memory Protection 
   	- Privilege level of code 
   	- Segmented registers point to segment descriptors 
   	
   # Virtual Memory Model 
   	- Kernel Space (1 GB)
   	- User Space (3 GB)
   	
   	-----------------
   	   Kernel Stack    
   	-----------------
   	     Stack             Function Args + Local Variable 
   	-----------------
   	Shared Libs + Mapping  
   	-----------------
   	     Heap 	       Dynamic Memory 
   	-----------------
   	     BSS	       Uninitialized Data  	
   	-----------------	  		  	
   	     Data	       initialiZed Data 
   	-----------------
   	     Text	       Program Code 
  
  # View Process Organization 
  	- /Proc
  		- /proc/pid/maps
  	- pmap
  	- Attach and view using GDB 
  
  1. Using /proc/pid/maps 
  
  	ex. 55f04c3f5000-55f04c423000 r--p 00000000 08:01 1868238                    /usr/bin/bash
  	
  	55f04c3f5000-55f04c423000 : Start and End Address of the section 
  	
  	r--p : Permissions of the section 
  		r = readable
  		w = writeable
  		x = executable
  		p = private not shared 
  		s = shared 
  	
  	00000000 : Offset in file for memory mapped files. 0 Otherwise.
  	
  	08:01 : Major-Minor Device number of device from where the file was loaded 
  	
  	1868238 : inode number 
  	
  	/usr/bin/bash : File Path 
  2. pmap [pid]
  	
  3. Using GDB 
  	- gdb /bin/bash
  	- break main 
  	- run 
  	- info proc mapping 
  	
  
  
  # Hello World 
  
  - IA-32 Instruction set 
  	- General Purpose instruction
  	- x87 FPU Instruction 
  	- MMX / SSE / SSE2 / SSE3 / SSE4
  	- Other Instruction set extension 
  	 
  - Programming in Assembly 
  	- NASM + LD for assembling and linking 
  	- Executable in ELF Format
  
  
  # Why System calls ? 
  
  	- Leverage OS for tasks 
  	- imagine if you had to write code from scratch to : 
  		- write to disk
  		- print on screen 
  		- ......
  	- System calls provide a simple interface for user space programs to the kernel 
  	
  user space program -> Interrupt Handler Table -> System call handler -> System call routine   
      (0x80)
  
  # IA-32 Mechanism to invoke-System calls 
  
  - int 0x80
  - SYSNTER
  	
  - Modern Implementation using VDSO [Virtual Dynamic Shared Object]
  
  Note : TO check all the system call in 32 bit : 
  command : vim /usr/include/x86_64-linux-gnu/asm/unistd_32.h
  
  to get description of any system call use : man 2 [system call name]
  					    : man 2 write 
  					    : man 2 exit 
  
  File Descriptor : fd : 0 for input (stdin)
  			 1 for output (stdout)
  			 2 for error 
  			  
  Exit Statement : 0 : program exit with no error 
  		   non zero value : program exited with some error 
  		   
  mov intstruction : 
  	mov instruction is responsible for moving data into registers, between registers and memory location.
    
  # How to compile and link the asm file 
  
  Compiling : 
  - nasm -f elf32 -o helloworld.o helloworld.asm
  Linking : 
  - ld -m elf_i386 -o helloworld helloworld.o  
  
  # Exercise : 
  
  Use GDB to step through the hello world program and observe 
  	- CPU Registers 
  	- Memory Loation 
  	- ......
  	
  NOTE : To use gdb, before running gdb run : export SHEL=/bin/sh
  
  Tracing of program : 
  
  -> to see disassemble output in intel syntax run : set disassembly-flavour intel
  -> To steps through the instruction use command : stepi
  -> To examine memory use : x/s this will convert the stream of memory into string 
  -> To single steps to the program : nexti
  
  # Fundamental Data types : 
  
  - Byte - 8 Bits 
  - Word - 16 Bits 
  - Double Word - 32 bits 
  - Quad Word - 64 Bits 
  - Double Quad word - 128 bits 
   
  # nasm 
  
  - Case Sensitive syntax 
  - Accessing memory reference with []
  	- message db 0xAA, 0xBB, 0xCC, 0xDD
  	- mov eax, message <- move address into eax
  	- mov eax, [message] <- move value into eax 
  	  
  # Defining initialized data in NASM : 
  
  1. db : define bites (just for one single byte) 
  2. dw : define word ( word is for two )
  	- if you define dw as 'a' it is translated as 0x61 0x00 
  3. dd : define double word 
  4. dq : define quad double word 
  5. dt : define ten bytes 
  
  # Declare Uninitialized Data 
  
  In order to declare uninitialized data there are two main function : 
  
  	1. resb  64 : reserve bytes (It reserve 64 bytes)
  	2. resw   1 : reserve word (reserve a word) 
  	
  # Special Tokens : 
  
  - $ : Evaluates to the current line 
  
  - $$ : Evalutes to the beginning of the current section  
  	
  # EQU and TIMES 
  
  - equ : equles 
  - times : times is replication of one instruction multiple times : ex times 100 movsb 
  									times 64 db 0
  									 	
  # IA-32 uses Little Endian Format 
  
   Register : 0A0B0C0D 
   Memory : a  : 0D   Low memory
   	    a+1: 0C
   	    a+2: 0B
   	    a+3: 0A   high memory 
   	    
   
   # GDB :
   
   -> To Show all the function in a binary use : 
   		- info functions 
   -> To Figure out the entry point of the program use : 
   		- (gdb) shell readelf -h [binary Name]  
 		- ex (gdb) shell readelf -h DataTypes 
 		- Now you get Entry Point address  
 		- -h : To print all the headers 
   -> to get information about all the variables 
   		- info variables 
   -> to get address use : 
   		- print &[variable name]
   -> There are two ways of printing values of variables :
   		- 1. x/xb [address of variable]
   		- 2. x/xb &[variable name]
   		- 3. x/3xb &[variable name]
   -> display/x $eax : this will run automatically as the program stops 
   	
  
  # Moving Data : 
  
  instruction 
  
  label     instruction    operand - register
  				   - Memory
  				   - immediate
  Some Instructions  
  
  # MOV
  
  - most common instruction in ASM 
  - Allowed Direction 
  	- Between Registers
  	- Memory to register and register to memory 
  	- Immediate Data to register 
  	- Immediate data to memory 
  	
  # LEA
  
  - Load effective Address - load pointer values 
  - LEA EAX, [label]
  
  # XCHG
  
  - Exchange (swaps) Values 
  - XCHG Register, Register
  - XCHG Register, Memory 
  
  	  
   Hooking is the process of looping of the given instruction when ever the program stops  
   	(gdb) define hook-stop
   	>print/x $eax 
	>print/x $ebx
	>print/x $ecx
	>x/8xb &sample
	>disassemble $eip,+10  
	>end

  # Stack : 
  
  - Used by Processes and threads to store temporary data 
  	- local variables 
  	- return addresses 
  - stack is a last in first out (LIFO) data structure 
  - ESP (Extended Stack pointer) : Should point on top of Stack 
  - PUSH : pushes the value onto the stack 
  - POP  : Remove the top most value from the stack 
    
  ----
  Exercise : 
  
  - Use the push/pop .. stack instruction in your program 
  - use GDB to examine the stack using the ESP and track the changes as the instructions run 
   

  # Arithmetic Instruction 
  	
     	-> Arithmetic Operation affect typically the status flags 
     	
     - ADD Destination, Source 
     - ADC(addition carry) Destination, Source(plus carru flag)
     - SUB and SBB(substract borrow) 
     - INC(increment) and DEC(decrement) 
     
  # Exercise 1.7.1
  
  - Multiply and Divide instruction 
  - GDB to trace execution and register value 
  
  # Unsigned Multiply : 
  
  - AL * r/m8   = AX = AH | AL 
  - AX * r/m16  = DX | AX
  - EAX * r/m32 = EDX | EAX
   
  # unsigned Division : 
  		Q    R       Q: Quotient R: remender
  - AX / r/m8 = AL | AH
  - DX | AX / r/m16 = AX | DX
  - EDX | EAX / r/m32 = EAX | EDX
  
  # Signed Arithmetic : 
  
  - IMUL
  - IDIV
  
  Note : OF = 1 and CF = 1 if upper half of result is non-zero 
     
  Note : To jump to next breakpoint use : (gdb) c
  					: c : continue 
  					
   
   				 		 
    		    
   	    
   	    
    
  
  
 
  
  
  
  
  
  
  
  
  
  
  
 
